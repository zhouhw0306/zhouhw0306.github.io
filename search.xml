<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>找不到工作..呜呜..</title>
      <link href="/2022/09/24/blog10/"/>
      <url>/2022/09/24/blog10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>&lt;{&#x3D;．．．．(嘎<del>嘎</del>嘎~)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星期天</title>
      <link href="/2022/09/24/blog9/"/>
      <url>/2022/09/24/blog9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>9点起床</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式（Builder）</title>
      <link href="/2022/09/24/blog8/"/>
      <url>/2022/09/24/blog8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="建造者模式（Builder）"><a href="#建造者模式（Builder）" class="headerlink" title="建造者模式（Builder）"></a>建造者模式（Builder）</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><h3 id="在需要生成复杂内部结构时使用，即将多个简单的对象一步一步构建称为一个复杂对象。"><a href="#在需要生成复杂内部结构时使用，即将多个简单的对象一步一步构建称为一个复杂对象。" class="headerlink" title="在需要生成复杂内部结构时使用，即将多个简单的对象一步一步构建称为一个复杂对象。"></a>在需要生成复杂内部结构时使用，即将多个简单的对象一步一步构建称为一个复杂对象。</h3><p>构建方式（1）</p><p>新建Person.java类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    public int age;</span><br><span class="line">    public String name;</span><br><span class="line">    public String sex;</span><br><span class="line">    public String address;</span><br><span class="line">    public String born;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Person&#123;&quot; +</span><br><span class="line">                &quot;age=&quot; + age +</span><br><span class="line">                &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, sex=&#x27;&quot; + sex + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, address=&#x27;&quot; + address + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, born=&#x27;&quot; + born + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSex() &#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getBorn() &#123;</span><br><span class="line">        return born;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBorn(String born) &#123;</span><br><span class="line">        this.born = born;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建构造（builder）类PersonBuilder .java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class PersonBuilder &#123;</span><br><span class="line"></span><br><span class="line">    private Person mPerson;</span><br><span class="line"></span><br><span class="line">    public PersonBuilder()&#123;</span><br><span class="line">        mPerson = new Person();</span><br><span class="line">    &#125;</span><br><span class="line">    public PersonBuilder setAge(int age)&#123;</span><br><span class="line">        mPerson.age = age;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public PersonBuilder setName(String name)&#123;</span><br><span class="line">        mPerson.name = name;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public PersonBuilder setSex(String sex)&#123;</span><br><span class="line">        mPerson.sex = sex;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public PersonBuilder setAddress(String address)&#123;</span><br><span class="line">        mPerson.address = address;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public PersonBuilder setBorn(String born)&#123;</span><br><span class="line">        mPerson.born = born;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Person create()&#123;</span><br><span class="line">        Log.i(&quot;msg&quot;, mPerson.toString());</span><br><span class="line">        return mPerson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void onClick(View view)&#123;</span><br><span class="line">        PersonBuilder builder = new PersonBuilder();</span><br><span class="line">        builder.setAge(20)</span><br><span class="line">                .setName(&quot;张三&quot;)</span><br><span class="line">                .setAddress(&quot;北京市&quot;)</span><br><span class="line">                .setSex(&quot;男&quot;)</span><br><span class="line">                .setBorn(&quot;厦门&quot;)</span><br><span class="line">                .create();</span><br><span class="line">        PersonBuilder builder1 = new PersonBuilder();</span><br><span class="line">        builder1.setAge(22)</span><br><span class="line">                .setName(&quot;李四&quot;)</span><br><span class="line">                .setAddress(&quot;上海市&quot;)</span><br><span class="line">                .setSex(&quot;女&quot;)</span><br><span class="line">                .setBorn(&quot;福州&quot;)</span><br><span class="line">                .create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里是不是与构建对话框与OKHTTP3类似呢？</p><p>构建方式（2）</p><p>新建Person.java类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    public int age;</span><br><span class="line">    public String name;</span><br><span class="line">    public String sex;</span><br><span class="line">    public String address;</span><br><span class="line">    public String born;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Person&#123;&quot; +</span><br><span class="line">                &quot;age=&quot; + age +</span><br><span class="line">                &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, sex=&#x27;&quot; + sex + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, address=&#x27;&quot; + address + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, born=&#x27;&quot; + born + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSex() &#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getBorn() &#123;</span><br><span class="line">        return born;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBorn(String born) &#123;</span><br><span class="line">        this.born = born;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ibuilder.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Ibuilder &#123;</span><br><span class="line">    void setAge(int age);</span><br><span class="line">    void setName(String name);</span><br><span class="line">    void setAddress(String address);</span><br><span class="line">    void setBorn(String born);</span><br><span class="line">    void setSex(String sex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ImplBuilder.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ImplBuilder implements Ibuilder &#123;</span><br><span class="line"></span><br><span class="line">    private Person mPerson;</span><br><span class="line"></span><br><span class="line">    public ImplBuilder()&#123;</span><br><span class="line">        mPerson = new Person();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        mPerson.setAge(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        mPerson.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        mPerson.setAddress(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setBorn(String born) &#123;</span><br><span class="line">        mPerson.setBorn(born);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        mPerson.setSex(sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Person create()&#123;</span><br><span class="line">        Log.i(&quot;msg&quot;, mPerson.toString());</span><br><span class="line">        return mPerson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ImplBuilder builder = new ImplBuilder();</span><br><span class="line">builder.setAge(20);</span><br><span class="line">builder.setName(&quot;王五&quot;);</span><br><span class="line">builder.setAddress(&quot;南京&quot;);</span><br><span class="line">builder.setBorn(&quot;武汉&quot;);</span><br><span class="line">builder.setSex(&quot;男&quot;);</span><br><span class="line">builder.create();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂方法模式</title>
      <link href="/2022/09/24/blog7/"/>
      <url>/2022/09/24/blog7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>LandAnimal.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface LandAnimal &#123;</span><br><span class="line">    public void run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WaterAnimal .java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface WaterAnimal &#123;</span><br><span class="line">    public void swim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cat .java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Cat implements LandAnimal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        Log.i(&quot;msg&quot;,&quot;cat is runing&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dog .java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Dog implements LandAnimal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        Log.i(&quot;msg&quot;,&quot;dog is runing&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fish .java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Fish implements WaterAnimal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void swim() &#123;</span><br><span class="line">        Log.i(&quot;msg&quot;,&quot;Fish is swiming&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Shark .java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Shark implements WaterAnimal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void swim() &#123;</span><br><span class="line">        Log.i(&quot;msg&quot;,&quot;Shark is swiming&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractFactory .java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public abstract class AbstractFactory &#123;</span><br><span class="line">    public abstract LandAnimal getDog();</span><br><span class="line">    public abstract LandAnimal getCat();</span><br><span class="line">    public abstract WaterAnimal getFish();</span><br><span class="line">    public abstract WaterAnimal getShark();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AnimalFactory.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class AnimalFactory extends AbstractFactory &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public LandAnimal getDog() &#123;</span><br><span class="line">        return new Dog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public LandAnimal getCat() &#123;</span><br><span class="line">        return new Cat();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public WaterAnimal getFish() &#123;</span><br><span class="line">        return new Fish();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public WaterAnimal getShark() &#123;</span><br><span class="line">        return new Shark();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AnimalFactory factory = new AnimalFactory();</span><br><span class="line">LandAnimal cat = factory.getCat();</span><br><span class="line">LandAnimal dog = factory.getDog();</span><br><span class="line">WaterAnimal fish = factory.getFish();</span><br><span class="line">WaterAnimal shark = factory.getShark();</span><br><span class="line">cat.run();</span><br><span class="line">dog.run();</span><br><span class="line">fish.swim();</span><br><span class="line">shark.swim();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式</title>
      <link href="/2022/09/24/blog6/"/>
      <url>/2022/09/24/blog6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>PersonAction.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface PersonAction &#123;</span><br><span class="line">    public void eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WomanEat.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class WomanEat implements PersonAction &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        Log.i(&quot;msg&quot;,&quot;woman is eating&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ManEat.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ManEat implements PersonAction &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        Log.i(&quot;msg&quot;,&quot;man is eating&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Provider.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Provider &#123;</span><br><span class="line">    public PersonAction produce();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WomanFactory .java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class WomanFactory implements Provider &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public PersonAction produce() &#123;</span><br><span class="line">        return new WomanEat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ManFactory.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ManFactory implements Provider &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public PersonAction produce() &#123;</span><br><span class="line">        return new ManEat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体使用如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ManFactory manFactory = new ManFactory();</span><br><span class="line">PersonAction action = manFactory.produce();</span><br><span class="line">action.eat();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单工厂模式</title>
      <link href="/2022/09/24/blog5/"/>
      <url>/2022/09/24/blog5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li><p>提供一种创建对象的最佳方式，在创建对象时不提供对外暴露创建逻辑，并且通过一个共同的接口来指向新创建的对象</p></li><li><p>定义一个创建对象的接口，让子类来决定实例化哪一个具体的工厂类，延迟到子类去执行</p></li><li><p>主要解决选择接口的问题</p></li><li><p>扩展性高，只增加相应工厂类即可，知道名称即可创建对象，屏蔽具体的实现，调用者只关心接口</p></li><li><p>增加需求时，需要增加具体类与工厂实现，导致类个数成倍增加，增加系统复杂度</p></li><li><p>只有需要生成复杂类对象时才需要使用工厂模式，且简单工厂模式不属于23种设计模式</p></li></ul><p>PersonAction.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface PersonAction &#123;</span><br><span class="line">    public void eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WomanFactory .java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class WomanEat implements PersonAction &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        Log.i(&quot;msg&quot;,&quot;woman is eating&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ManEat.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ManEat implements PersonAction &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        Log.i(&quot;msg&quot;,&quot;man is eating&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Provider.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Provider &#123;</span><br><span class="line">    public PersonAction produce();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WomanFactory .java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class WomanFactory implements Provider &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public PersonAction produce() &#123;</span><br><span class="line">        return new WomanEat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ManFactory.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ManFactory implements Provider &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public PersonAction produce() &#123;</span><br><span class="line">        return new ManEat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体使用如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ManFactory manFactory = new ManFactory();</span><br><span class="line">PersonAction action = manFactory.produce();</span><br><span class="line">action.eat();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue使用markdown</title>
      <link href="/2022/09/24/blog4/"/>
      <url>/2022/09/24/blog4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>前言：</p><p>项目开发需要用到富文本编辑器，最终确定使用vue框架 vue-meditor 。</p><h2 id="1、vue-meditor简介"><a href="#1、vue-meditor简介" class="headerlink" title="1、vue-meditor简介"></a>1、vue-meditor简介</h2><p>一款使用marked和highlight.js开发的一款markdown编辑器，除常见markdown语法外，支持快捷输入、图片粘贴、代码复制、全屏编辑、预览等功能</p><h3 id="1-1、优点："><a href="#1-1、优点：" class="headerlink" title="1.1、优点："></a>1.1、优点：</h3><p>使用简单，安装npm包或者引入js包就行<br>方便扩展，定制型比较强<br>功能强大，总分3个版本，简单版、预览版、专业版<br>体积小，加载速度快，npm包删除了highlight.js和codemirror里的依赖</p><h3 id="1-2、实现思路："><a href="#1-2、实现思路：" class="headerlink" title="1.2、实现思路："></a>1.2、实现思路：</h3><p>通过监听文本输入区域内内容的变化，实时将输入的markdown语法进行编译，并渲染到预览区域。<br>编辑器大致分为头部菜单栏、左侧内容输入区域、右侧预览区域三个部分。<br>头部菜单主要为定自定义标题区域和菜单按钮，菜单按钮可通过配置文件进行显示和隐藏；左侧编辑区域，简单版使用textarea开发，满足基本需求，<br>专业版使用codemirror开发，编辑区域支持手动输入文本和通过头部菜单插入；右侧预览区域可实时预览输入文本，并可通过菜单按钮，进行编辑区域和预览区域的切换</p><h3 id="1-3详细文档："><a href="#1-3详细文档：" class="headerlink" title="1.3详细文档："></a>1.3详细文档：</h3><p>github项目地址：<a href="https://github.com/zhaoxuhui1122/vue-markdown">https://github.com/zhaoxuhui1122/vue-markdown</a></p><p>github文档地址：<a href="https://zhaoxuhui1122.github.io/vue-markdown-docs/">https://zhaoxuhui1122.github.io/vue-markdown-docs/</a></p><h2 id="2、安装使用"><a href="#2、安装使用" class="headerlink" title="2、安装使用"></a>2、安装使用</h2><h3 id="2-1、使用npm方式引入"><a href="#2-1、使用npm方式引入" class="headerlink" title="2.1、使用npm方式引入"></a>2.1、使用npm方式引入</h3><h3 id="1、npm安装"><a href="#1、npm安装" class="headerlink" title="1、npm安装"></a>1、npm安装</h3><p>vue项目中，确保npm,node版本没有问题，直接用npm安装,</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-meditor --save</span><br></pre></td></tr></table></figure><h3 id="2、项目中使用"><a href="#2、项目中使用" class="headerlink" title="2、项目中使用"></a>2、项目中使用</h3><p>注意，count初始化赋值的时候，如果是后台传输数据，一定坐下异常处理。否则如果count为null，组件会报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//简单版</span><br><span class="line">import Markdown from &#x27;vue-meditor&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;markdownTest&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    count: &#x27;测试预览&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Markdown</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//html</span><br><span class="line">&lt;MarkdownPro</span><br><span class="line">v-model=&quot;count&quot;</span><br><span class="line">:height=&quot;400&quot;</span><br><span class="line">@on-paste-image=&quot;onPasteImage&quot;</span><br><span class="line">@on-ready=&quot;onReady&quot;</span><br><span class="line">@on-copy=&quot;onCopy&quot;</span><br><span class="line">@on-save=&quot;onSave&quot;</span><br><span class="line">theme=&quot;light&quot;</span><br><span class="line">/&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//专业版</span><br><span class="line">import &#123; MarkdownPro &#125; from &#x27;vue-meditor</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;markdownTest&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    count: &#x27;测试预览&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MarkdownPro</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onReady (data) &#123;</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;,</span><br><span class="line">    onCopy (text) &#123;</span><br><span class="line">      console.log(text)</span><br><span class="line">    &#125;,</span><br><span class="line">    onPasteImage (file) &#123;</span><br><span class="line">      console.log(file)</span><br><span class="line">    &#125;,</span><br><span class="line">    onSave (data) &#123;</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//html</span><br><span class="line">&lt;MarkdownPro</span><br><span class="line">v-model=&quot;count&quot;</span><br><span class="line">:height=&quot;400&quot;</span><br><span class="line">@on-paste-image=&quot;onPasteImage&quot;</span><br><span class="line">@on-ready=&quot;onReady&quot;</span><br><span class="line">@on-copy=&quot;onCopy&quot;</span><br><span class="line">@on-save=&quot;onSave&quot;</span><br><span class="line">theme=&quot;light&quot;</span><br><span class="line">/&gt;</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">//预览版</span><br><span class="line">import &#123; MarkdownPreview &#125; from &#x27;vue-meditor&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;markdownTest&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    count: &#x27;测试预览&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MarkdownPreview</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//html</span><br><span class="line">&lt;MarkdownPro</span><br><span class="line">v-model=&quot;count&quot;</span><br><span class="line">:height=&quot;400&quot;</span><br><span class="line">theme=&quot;light&quot;</span><br><span class="line">/&gt;                   </span><br></pre></td></tr></table></figure><h2 id="2-2、js安装包引用"><a href="#2-2、js安装包引用" class="headerlink" title="2.2、js安装包引用"></a>2.2、js安装包引用</h2><h3 id="1、下载github代码"><a href="#1、下载github代码" class="headerlink" title="1、下载github代码"></a>1、下载github代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zhaoxuhui1122/vue-markdown.git</span><br></pre></td></tr></table></figure><h3 id="2、复制文件"><a href="#2、复制文件" class="headerlink" title="2、复制文件"></a>2、复制文件</h3><p>复制src文件夹下内容至components文件夹下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//简单版</span><br><span class="line">import Markdown from &#x27;@/components/markdown/...&#x27;;</span><br><span class="line">//专业版 </span><br><span class="line">import MarkdownPro from &#x27;@/components/markdown/pro&#x27;;</span><br><span class="line">//预览组件</span><br><span class="line">import MarkdownPreview from &#x27;@/components/markdown/preview&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2022/09/03/blog3/"/>
      <url>/2022/09/03/blog3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="JAVA单例模式6种写法"><a href="#JAVA单例模式6种写法" class="headerlink" title="JAVA单例模式6种写法"></a>JAVA单例模式6种写法</h2><ol><li><h3 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例类.在类初始化时实例化   </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">single</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    <span class="comment">//静态工厂方法   </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> single;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><h3 id="懒汉式1"><a href="#懒汉式1" class="headerlink" title="懒汉式1"></a>懒汉式1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><h3 id="懒汉式2（同步方法）"><a href="#懒汉式2（同步方法）" class="headerlink" title="懒汉式2（同步方法）"></a>懒汉式2（同步方法）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><h3 id="懒加载3（双重校验锁）"><a href="#懒加载3（双重校验锁）" class="headerlink" title="懒加载3（双重校验锁）"></a>懒加载3（双重校验锁）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><h3 id="枚举形式"><a href="#枚举形式" class="headerlink" title="枚举形式"></a>枚举形式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="comment">//任意方法，调用时使用INSTANCE.方法名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whateverMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022/8/28</title>
      <link href="/2022/08/28/blog2/"/>
      <url>/2022/08/28/blog2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="周日-睡到11点"><a href="#周日-睡到11点" class="headerlink" title="周日 睡到11点"></a>周日 睡到11点</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022/08/13</title>
      <link href="/2022/08/13/blog1/"/>
      <url>/2022/08/13/blog1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h3 id="周六-睡到11点-o-￣︶￣-o"><a href="#周六-睡到11点-o-￣︶￣-o" class="headerlink" title="周六 睡到11点,o(￣︶￣)o"></a>周六 睡到11点,o(<em>￣︶￣</em>)o</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    print(input(<span class="string">&#x27;&#x27;).replace(&#x27;</span>吗<span class="string">&#x27;,&#x27;</span><span class="string">&#x27;).replace(&#x27;</span>？<span class="string">&#x27;,&#x27;</span>！<span class="string">&#x27;))</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo!</title>
      <link href="/2022/08/12/hello/"/>
      <url>/2022/08/12/hello/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="8-x2F-12-x2F-2022"><a href="#8-x2F-12-x2F-2022" class="headerlink" title="8&#x2F;12&#x2F;2022"></a>8&#x2F;12&#x2F;2022</h2><h3 id="创建基于hexo的个人博客-hello-hexo"><a href="#创建基于hexo的个人博客-hello-hexo" class="headerlink" title="创建基于hexo的个人博客, hello hexo!"></a>创建基于hexo的个人博客, hello hexo!</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
